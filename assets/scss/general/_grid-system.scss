// BEGIN GRID SYSTEM //

@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {
  $min: breakpoint-min($name, $breakpoints);
  @if $min {
    @media (min-width: $min) {
      @content;
    }
  } @else {
    @content;
  }
}

@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {
  @return if(breakpoint-min($name, $breakpoints) == null, "", "-#{$name}");
}

@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {
  $min: map-get($breakpoints, $name);
  @return if($min != 0, $min, null);
}

@mixin make-col($size, $columns: $grid-columns) {
  flex: 0 0 percentage($size / $columns);
  // Add a `max-width` to ensure content within each column does not blow out
  // the width of the column. Applies to IE10+ and Firefox. Chrome and Safari
  // do not appear to require this.
  max-width: percentage($size / $columns);
}

@mixin make-col-padding($breakpoint: "sm") {
  padding-left: $grid-gutter-normal / 2;
  padding-right: $grid-gutter-normal / 2;
}

@mixin make-col-offset($size, $columns: $grid-columns) {
  $num: $size / $columns;
  margin-left: if($num == 0, 0, percentage($num));
}

// END GRID SYSTEM //
// BEGIN GRID SYSTEM //

.container {
  width: 100%;
  max-width: 114rem;
  padding-right: ($grid-gutter-normal / 2);
  padding-left: ($grid-gutter-normal / 2);
  margin-right: auto;
  margin-left: auto;
}

.row {
  display: flex;
  flex-wrap: wrap;
  max-width: unquote("calc(100% + " + $grid-gutter-normal + ")");
  margin-right: ($grid-gutter-normal / -2);
  margin-left: ($grid-gutter-normal / -2);
}

// Common properties for all breakpoints
%grid-column {
  position: relative;
  width: 100%;
  max-width: 100%;
  flex: 0 0 100%; // Prevent IE overflow when resize window
  min-height: 1px; // Prevent columns from collapsing when empty
  padding-right: ($grid-gutter-normal / 2);
  padding-left: ($grid-gutter-normal / 2);
}

@each $breakpoint in map-keys($grid-breakpoints) {
  $infix: breakpoint-infix($breakpoint, $grid-breakpoints);

  // Allow columns to stretch full width below their breakpoints
  @for $i from 1 through $grid-columns {
    .col#{$infix}-#{$i} {
      @extend %grid-column;
    }
  }
  .col#{$infix},
  .col#{$infix}-auto {
    @extend %grid-column;
  }

  @include media-breakpoint-up($breakpoint, $grid-breakpoints) {
    // Provide basic `.col{bp}` classes for equal-width flexbox columns
    .col#{$infix} {
      flex-basis: 0;
      flex-grow: 1;
      max-width: 100%;
      @include make-col-padding($breakpoint);
    }
    .col#{$infix}-auto {
      flex: 0 0 auto;
      width: auto;
      max-width: none; // Reset earlier grid tiers
      @include make-col-padding($breakpoint);
    }

    @for $i from 1 through $grid-columns {
      .col#{$infix}-#{$i} {
        @include make-col($i, $grid-columns);
        @include make-col-padding($breakpoint);
      }
    }

    .order#{$infix}-first {
      order: -1;
    }

    .order#{$infix}-last {
      order: $grid-columns + 1;
    }

    @for $i from 0 through $grid-columns {
      .order#{$infix}-#{$i} {
        order: $i;
      }

      .offset#{$infix}-#{$i} {
        @include make-col-offset($i, $grid-columns);
      }
    }
  }
}

.no-gutters {
  margin-right: 0;
  margin-left: 0;

  > div {
    padding-right: 0;
    padding-left: 0;
  }
}
@media (max-width: 992px) {
  .no-gutters-sm {
    margin-right: 0;
    margin-left: 0;

    > div {
      padding-right: 0;
      padding-left: 0;
    }
  }
}
.row-xs {
  max-width: unquote("calc(100% + " + $grid-gutter-xsmall + ")");
  margin-right: $grid-gutter-xsmall / -2;
  margin-left: $grid-gutter-xsmall / -2;

  > div {
    padding-right: $grid-gutter-xsmall / 2;
    padding-left: $grid-gutter-xsmall / 2;
  }
}

.row-sm {
  max-width: unquote("calc(100% + " + $grid-gutter-small + ")");
  margin-right: $grid-gutter-small / -2;
  margin-left: $grid-gutter-small / -2;

  > div {
    padding-right: $grid-gutter-small / 2;
    padding-left: $grid-gutter-small / 2;
  }
}

.row-lg {
  max-width: unquote("calc(100% + " + $grid-gutter-large + ")");
  margin-right: $grid-gutter-large / -2;
  margin-left: $grid-gutter-large / -2;

  > div {
    padding-right: $grid-gutter-large / 2;
    padding-left: $grid-gutter-large / 2;
  }
}

// END GRID SYSTEM //
